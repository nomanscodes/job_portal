import { Button, FormControl, Grid, Input, InputLabel, MenuItem, Select, TextField, Typography } from '@mui/material';
import React, { useState, useEffect } from 'react';
import { parseCookies } from 'nookies';
import { useRouter } from 'next/router';
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import Head from 'next/head';
import ReactHtmlParser from "react-html-parser";
import { ReactMarkdown } from 'react-markdown/lib/react-markdown';

import MyStatefulEditor from '@/Component/TextEditor';

const Edit = () => {
  const router = useRouter();
  const id = router?.query?.id;

  const cookies = parseCookies();
  const token = cookies?.access;

  const [jobPost, setJobPost] = useState([]);
  const [data, setData] = useState([]);

  const [title, setTitle] = useState('');
  const [company_name, setCompany_name] = useState('');
  const [overview, setOverview] = useState('')
  const [responsibilities, setResponsibilities] = useState('')
  const [requirements, setRequirements] = useState('')
  const [job_type, setJob_type] = useState('')
  const [location, setLocation] = useState('')
  const [shift, setSift] = useState('')

  const handleFilter = () => {
    const filtered = jobPost.filter((item) => {
      return item.id == id;
    });

    setData(filtered);
  };

  const getJobData = async () => {
    var myHeaders = new Headers();
    myHeaders.append('Authorization', `Bearer ${token}`);

    var requestOptions = {
      method: 'GET',
      headers: myHeaders,
      redirect: 'follow',
    };

    const job = await fetch(
      `https://nomanhasan.pythonanywhere.com/api/view/`,
      requestOptions
    );

    const jobData = await job.json();
    setJobPost(jobData.data);
  };

  useEffect(() => {
    getJobData();
  }, []);

  useEffect(() => {
    if (jobPost.length > 0) {
      handleFilter();
    }
  }, [jobPost]);

  useEffect(() => {
    if (data.length > 0) {
      setTitle(data[0].title);
      setCompany_name(data[0].company_name)
      setOverview(data[0].overview)
      setResponsibilities(data[0].responsibilities)
      setRequirements(data[0].requirements)
      setJob_type(data[0].job_type)
      setLocation(data[0].location)
      setSift(data[0].shift)
    }
  }, [data]);

  async function sendPost(responsibilities, requirements, company_name, job_type, location, overview, shift, title) {

    var myHeaders = new Headers();
    myHeaders.append("Content-Type", "application/json");
    myHeaders.append("Authorization", `Bearer ${token}`);

    var raw = JSON.stringify({
      "title": title,
      "company_name": company_name,
      "overview": overview,
      "responsibilities": responsibilities,
      "requirements": requirements,
      "job_type": job_type,
      "location": location,
      "shift": shift
    });

    var requestOptions = {
      method: "PUT",
      headers: myHeaders,
      body: raw
    };

    const Job = await fetch(`https://nomanhasan.pythonanywhere.com/api/edit/${id}/`, requestOptions);

    const result = await Job.json();

    toast.success(result.msg);
    setTimeout(() => {
      router.push("/joblist");
    }, 1000);

  }

  function SubmitHandler(e) {
    e.preventDefault();

    if (responsibilities == "" || requirements == "" || company_name == "" || job_type == "" || location == "" || overview == "" || shift == "" || title == "") {
      toast.error(`All field are required`);
    } else {
      sendPost(responsibilities, requirements, company_name, job_type, location, overview, shift, title)
    }
  }

  return (
    <>
      <Head>
        <title>Create Job</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ToastContainer />
      <div style={{ marginTop: 77, display: "flex", alignItems: "center", justifyContent: "center" }}>
        <FormControl>
          <Typography sx={{ mb: 5 }} variant='h5'>Update Job Post</Typography>
          <TextField onChange={(e) => setTitle(e.target.value)} value={title} id="outlined-basic" label="Title" variant="outlined" sx={{ width: 500 }} />

          <TextField onChange={(e) => setCompany_name(e.target.value)} value={company_name} id="outlined-basic" label="Company Name" variant="outlined" sx={{ width: 500, mt: 2 }} />

          <TextField onChange={(e) => setOverview(e.target.value)} value={overview} id="outlined-basic" label="Overview" variant="outlined" sx={{ width: 500, mt: 2, backgroundColor: "white" }} />


          <textarea className='textArea' cols="30" onChange={(e) => setResponsibilities(e.target.value)} value={responsibilities} style={{ marginTop: 12, padding: 8 }} ></textarea>

          <textarea className='textArea' cols="30" onChange={(e) => setRequirements(e.target.value)} value={requirements} style={{ marginTop: 12, padding: 8 }} ></textarea>
          <FormControl fullWidth sx={{ mt: 2 }}>
            <InputLabel id="demo-simple-select-label">Job Type</InputLabel>
            <Select
              labelId="demo-simple-select-label"
              id="demo-simple-select"
              name='job_type'
              label="Job"
              value={job_type}
              onChange={(e) => setJob_type(e.target.value)}
            >
              <MenuItem value="Full Time">Full Time</MenuItem>
              <MenuItem value="Part Time">Part Time</MenuItem>
            </Select>
          </FormControl>
          <TextField onChange={(e) => setLocation(e.target.value)} value={location} id="outlined-basic" label="Location" variant="outlined" sx={{ width: 500, mt: 2 }} />
          <FormControl fullWidth sx={{ mt: 2 }}>
            <InputLabel id="demo-simple-select-label">Shift</InputLabel>
            <Select
              labelId="demo-simple-select-label"
              id="demo-simple-select"
              name='shift'
              label="Shift"
              value={shift}
              onChange={(e) => setSift(e.target.value)}
            >
              <MenuItem value="Day Shift">Day Shift</MenuItem>
              <MenuItem value="Night Shift">Night Shift</MenuItem>
            </Select>
          </FormControl>
          <Button
            type="submit"
            onClick={SubmitHandler}
            fullWidth
            variant="contained"
            sx={{ mt: 3, mb: 2 }}
          >
            Update
          </Button>
        </FormControl>
      </div>
    </>
  );
};

export default Edit;